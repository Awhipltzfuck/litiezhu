---
layout: post
title:  "扩展"
date:   2015-10-20 09:53:49
categories: 技术
tags: 技术
---
1. 抢红包---活动：Dirichlet分布

2. 基尼系数 

3. cdn动态加速，按次数收费，无非是多一次域名解析。

4. LRU算法:
我的同事需要一个固定大小的cache，如果记录在cache中，直接从cache中读取，否则从数据库中读取。python的dict 是一个非常简单的cache,但是由于数据量很大，内存很可能增长的过大，因此需要限定记录数，并用LRU算法丢弃旧记录。key 是整型，value是10KB左右的python对象<br>
分析：<br>
1）可以想到，在对于cache，我们需要维护 key -> value 的关系<br>
2）而为了实现LRU，我们又需要一个基于时间的优先级队列，来维护   timestamp  -> (key, value) 的关系<br>
3）当cache 中的记录数达到一个上界maxsize时，需要将timestamp 最小的(key,value) 出队列<br>
4) 当一个（key, value) 被命中时，实际上我们需要将它从队列中，移除并插入到队列的尾部。<br>
从分析可以看出我们的cache 要达到性能最优需要满足上面的四项功能，对于队表的快速移除和插入，链表显然是最优的选择，为了快速移除，最好使用双向链表，为了插入尾部，需要有指向尾部的指针

5. 信用卡验证算法-luhn算法

6. 丰田全局变量：

a. 比如德国博世，他们的变量比丰田还多。通常，首先拆分成一百多个模块，命名方式再用模块名+物理衡量因子+物理含义+存储属性（可选）的方

式，命名简单而自然。<br>

b.汽车代码的标定量必须是全局变量，所以一万个全局变量很正常，标定区给到512K的都有。行业的特殊情况。日本人这。样，德国人美国人也这样。<br>

c.博世的似乎是25000个，还不是欧六。汽车电子就是这样不是？否则，靠什么机制进行耦合模块间的信息交互呢？难不成写25000个函数？<br>

7. try except 是否影响性能：

a. 无论是把代码放在 try 中执行还是在 except 中执行性能消耗几乎是一样的。

b. 直接执行代码与放在try中执行且不抛出异常时性能消耗几乎是一样的，当然理论上try会消耗一点性能，可以忽略不计。

c. 虽然try…except的方式比try…except BaseException和捕捉抛出的特定异常的方式要略快，但扔不建议采取这种方式，因为前者很容易隐藏真正的bug，从而带来严重后果。

d. 通常要采取捕捉抛出的特定异常而不是捕捉所有异常，虽然二者性能消耗几乎一样。

e. 防御性方式编码比捕捉异常方式性能消耗几乎相差好几倍，应尽量采取这种编程方式，提升性能并且更靠谱。

8. 跨域:只要协议、域名、端口有任何一个不同，都被当作是不同的域。

URL                      说明       是否允许通信
http://www.a.com/a.js
http://www.a.com/b.js     同一域名下   允许
http://www.a.com/lab/a.js
http://www.a.com/script/b.js 同一域名下不同文件夹 允许
http://www.a.com:8000/a.js
http://www.a.com/b.js     同一域名，不同端口  不允许
http://www.a.com/a.js
https://www.a.com/b.js 同一域名，不同协议 不允许
http://www.a.com/a.js
http://70.32.92.74/b.js 域名和域名对应ip 不允许
http://www.a.com/a.js
http://script.a.com/b.js 主域相同，子域不同 不允许
http://www.a.com/a.js
http://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问）
http://www.cnblogs.com/a.js
http://www.a.com/b.js 不同域名 不允许

对于端口和协议的不同，只能通过后台来解决。

9. 如果非常的大的数，算法之类的，除了考虑复杂度外，还可以考虑多进程，并行处理.

10. 整包升级与差分升级：

    1.整包：不容易出错-忽略设备上的任意修改；不需要依赖特殊的固件；但是整包的大小比较接近整个固件的镜像，下载更新包将是一个很漫长的过程。
存在一定的安全漏洞-可以在固件比较接近的镜像上进行升级实用

    2.差分：安全-必须是特定的节点才能进行升级；相对于整包来说更容易控制；但是在升级过程中比较容易出错，流程控制上更严谨。

11. 数据库是一个易于访问和修改的信息集合。不过简单的一堆文件也能达到这个效果。事实上，像SQLite这样最简单的数据库也只是一堆文件而已，但SQLite是精心设计的一堆文件，因为它允许你：使用事务来确保数据的安全和一致性;快速处理百万条以上的数据.

12. 三元闭包定义：在一个社交圈内，若两个人有一个共同好友，则这两个人在未来成为好友的可能性就会提高。机会、信任、动机.
	相当于对每个共同好友一视同仁，都贡献1分，但是共同好友中，有些人好友多，有些好友少，当某个共同好友的好友数较少时，这个共同好友应该更加重要，所以可以通过除以每个共同好友的好友数进行加权.基于一个假设：用户对新添加的好友更感兴趣。如图：f1和f2是用户u的好友，相对于很久之前添加的好友f2，f1是近期添加，用户对f1近期添加的好友更感兴趣

	Facebook的数据表明：好友关系建立中，拥有10个共同好友是只有1个共同好友的12倍。

13.如果不止做一次，那就自动化（vip／换机／二维码）

2.写文档是个过程，而且要在项目期间编写。

3.尽可能通用化

4.保持条理，永远不要上网搜索两次相同的东西。

5.3-2-1备份

6.千禧危机

 
